
import { HuulkSessionValidatorChain } from './utils/Validation.js';

const SESSION_COOKIE_NAME = "huulkSessionId";
const SESSION_DATA_NAME = "userData";
const UNLIMITED_SESSIONS = 0;
const NO_CSRF: string = "_";

const THROTTLE_DB_NUM: number = 0;
const SESSION_DB_NUM: number = 1;

const SET_COOKIE = "Set-Cookie";
const MAX_AGE = "Max-Age";
const HTTP_ONLY = "HttpOnly"
const SECURE = "Secure";
const SAME_SITE = "SameSite";
const CSRF_HEADER = "x-xsrf-token";

const ONE_DAY_IN_MS: number = 86400000;


"strictt"
"lax"
"none; secure"

/**
 * HuulkHttpHeaders contains the http headers supported by the http protocol
 */
class  HuulkHttpMethods {
    public static readonly GET: string = "GET";
    public static readonly PUT: string = "PUT";
    public static readonly POST: string = "POST";
    public static readonly DELETE: string = "DELETE";
    public static readonly PATCH: string = "PATCH";
    public static readonly OPTIONS: string = "OPTIONS";
    public static allMethods(): string []
    {
        return [
            this.GET,this.PUT,this.POST,this.PATCH,this.OPTIONS,this.DELETE
        ]
    }
}
/**
 * HuulkCorsHeaders holds the set of headers used to configure the CORS response created by Huulk.
 *  If Access-Control-Allow-Credentials is true, 
 *              then you may not set Access-Control-Allow-Methods, * but must use specific methods or method List: GET,PUT,POST and so on.
 *              then you may not set Access-Control-Allow-Origin, * but must use specific methods or method List: http:localhost:PORT_NUMBER
 * 

 * @param ACCESS_CONTROL_ALLOW_ORIGIN Header returns whether or not the origin is allowed in the cors registry.
 * @param ACCESS_CONTROL_ALLOW_METHODS Header returns a list HTTP methods which are permitted by cors to be sent to the app.
 * @param ACCESS_CONTROL_ALLOW_HEADERS  Headerr returns a list of HTTP headers which the browser can send with a CORS request
 * @param ACCESS_CONTROL_MAX_AGE Header returns in MS the maximum caching age of a Preflight cors request.
 * @param ACCESS_CONTROL_ALLOW_CREDENTIALS Header which specifies whether or not credentials can be sent along with Http Request.
 */
class HuulkHttpHeaders {
    public static readonly ACCESS_CONTROL_ALLOW_ORIGIN :string  =  "Access-Control-Allow-Origin";
    public static readonly ACCESS_CONTROL_ALLOW_METHODS: string =  "Access-Control-Allow-Methods";
    public static readonly ACCESS_CONTROL_ALLOW_HEADERS: string = "Access-Control-Allow-Headers";
    public static readonly ACCESS_CONTROL_EXPOSE_HEADERS: string = "Access-Control-Expose-Headers";
    public static readonly ACCESS_CONTROL_MAX_AGE: string =  "Access-Control-Max-Age";
    public static readonly ACCESS_CONTROL_ALLOW_CREDENTIALS: string = "Access-Control-Allow-Credentials";

    public static readonly AUTHORIZATION: string = "Authorization";
    public static readonly ORIGIN: string = "origin";
    public static readonly VARY: string =  "vary";
}
interface UserObjectSessionDataTypeBase {
    userData: {authorities:any}
}

interface NodeRequest<UserObjectSessionType extends UserObjectSessionDataTypeBase> {
    headers: any
    method: string
    body: any
    cookies: any
    huulkSession: HuulkSession<UserObjectSessionType>
    userData?: UserObjectSessionType
}

interface NodeResponse
{
    cookie(cookieName:string,cookieValue:string,cookieOptions:CookieOptions): any
    setHeader(headerName:  string, headerValues: any): void
    getHeaders() : any
    end(arg?:string) : any
    clearCookie():any
    status:(statuCode: number) => NodeResponse
}

enum HuulkEnvironment {
    PRISMA_TESTING,
    LOCAL_TESTING,
    PROD_SMASH
}

/**
 * CookieOptions represents a global configuration for every cookie generated by the app.  
    * @param secure  boolean which if true, cookie is only sent in requests using Encyrption (HTTPS).  If false, it is sent for requests using HTTPS or HTTP. Use false for local env only.
    * @param httpOnly boolean which if true,  javascript cannot access this token, If false, Javascript can access  this token.
    * @param maxAge  number integer which represents how long the the cookie is valid for after creation in miliseconds. For example, if set to one 10000,  then the cookie is only valid for 10 seconds.
    * @param clearCookieAfterMaxAge  boolean which if true, will delete the session cookie from the session store, freeing up space. If true, there is an extremeely small chance of some other user getting the deleted cookie since it no longer exists in the store.
 */
interface CookieOptions {
    secure:boolean
    httpOnly:boolean
    maxAge: number
    clearCookieAfterMaxAge:boolean
}

/**
 * Used to configure which SessionManager you would like to use with Huulk
 * @param SQL_LITE_PRISMA_LOCAL Useful for local testing only. Will use prisma+SqlLite to manager your sessions.
 * @param HUULK_REDIS Uses a single redis instance to manage your sessions/
 * @param CUSTOM_SESSION_MANAGER You provide your own custom CustomHuulkSessionManager implementation and Huulk will use it.
 */
enum CacheManagerImplementation {
    HUULK_REDIS,
    CUSTOM_SESSION_MANAGER
}
/**
 * Used to configure certain behaviors of Huulk mostly related to session managment and app lifecycle. 
 * @param clearSessionStorageOnStart boolean if true, session store is wiped on app start after middleware mounting
 * @param sessionManagerImplementation HuulkTypes exported enum (import {SessionManagerImplementation} ... ) which specifies the type of session manager you are going to use. T
 * @param  customSessionManager If using CustomSessionManager from SessionManagerImplementation Enum, then you supply your session manager here.
 * @param  enableCSRF boolean if true, CSRF checking turned on. If false, CSRF tokens are not checked
 * @param csrfGenerator function if supplied, your generator function returns a csrf token tring which will then be used in csrf checks.
 * @param maximumSessionsAllowed number integer maximum sessions a user can have. If set to 0, then a user can create unlimited sessions.
 * 
 */
interface HuulkOptions {
    cacheOptions: HuulkCacheOptions
    sessionOptions: HuulkSessionOptions
    csrfOptions: HuulkCSRFOptions,
    cookieOptions: CookieOptions
    corsOptions: HuulkCorsOptions,
    throttleOptions: HuulkThrottleOptons,
    statusCodeOnInvalidSession: number
    clearCookiesOnSessionNotFound: boolean,
    environment: HuulkEnvironment
}

/**
 * Options object for configuring the cache. 
 * @param hostname the host of the cache
 * @param port the exposed tcp port of the cache.
 * @param username the username of the user
 * @password the password of the user 
 */
interface HuulkCacheOptions {
    hostname:string, 
    port: number,
    username:string,
    password:string 
    dbName: string|number
    cacheImplementation: CacheManagerImplementation
}
interface HuulkCSRFOptions{
    enableCSRF: boolean 
    tokenGenerator:() => string
    csrfGenerator?: () => string

}
interface HuulkSessionOptions {
    clearSessionStorageOnStart:boolean
    customSessionManager?: IHuulkSessionManager
    deleteSessionIdOnLogout: boolean,
    disableSessionValidation: boolean,
    maximumSessionsAllowed:number
    maximumSessionPreventsLogin: boolean 
    sessionManagerImplementation: CacheManagerImplementation
    redisOptions?: HuulkRedisOptions
}

interface HuulkRedisOptions {
    username: string
    password: string 
    host: string 
    port: number
    dbNumber: string
}
interface HuulkValidationOptions {
    disableSessionValidation: boolean
    statusCodeOnInvalidSession: number
    clearCookiesOnSessionNotFound: boolean
}

interface HuulkClientOptions {
    clientType: CacheManagerImplementation
    customSessionManager?: IHuulkSessionManager
    enableLogging: boolean
}

interface HuulkCorsOptions { 
    corsEnabled: boolean
    allowedOrigins: string []
    allowedMethods: string []
    withCredentials: boolean,
    exposeHeaders: string [],
    allowedHeaders: string []

}

/**
 * HuulkThrottleOptions is used to configure Throttle middldware.
 * @param enableThrottling boolean representing whether or not to perform throttling checks
 * @param throttleManagerType SessionManagerImplementation representing which type of cache to use for throttling, Redis, Prisma and etc.
 * @param HuulkCacheOptions the cache implementation which will be used to store throttling info.
 * @param maximumLimit the maximum number of requests a user can send to the app per daily, weekly, and X increments 
 * @param statusCodeOnThrottleLimit the status code which to send once the request limit has been reached.
 */
interface HuulkThrottleOptons {
    enableThrottling: boolean
    throttleManagerType: CacheManagerImplementation,
    resetMsIncrement: number,
    cacheOptions: HuulkCacheOptions,
    maximumLimit: number,
    statusCodeOnThrottleLimit: number,
}

"{\"username\":\"test\",\"sessionCount\":2,\"sessionKeys\":[\"9c8927e9-0c04-44ef-8964-201a0f30a046\",\"2597697e-511e-4125-a2ba-eb8467767168\"]}"


interface HuulkSessionMetaData {
    username:string,
    sessionCount: number,
    sessionKeys: string []
}




class HuulkSession<SessionDataType extends UserObjectSessionDataTypeBase> {
    id: String
    sessionUser:String 
    userData: SessionDataType
    maxAge: Date
    createdAt: Date
    csrfToken: string;

    constructor(storeData: any){
        this.id = storeData["id"];
        this.sessionUser = storeData["sessionUser"];
        this.maxAge = storeData["maxAge"];
        this.csrfToken = storeData["csrfToken"];
        this.createdAt = new Date(storeData["createdAt"]);
        //@ts-ignore
        this.userData = storeData["userData"];
    }
}

/**
 * Function type to be implented inside a CustomHuulkSessionManager for Session validation. 
 */

/**
 *     
     * @param options the HuulkOptions to configure the manager with. These  options supply global middle ware config options, such as maximum sessions and cors, and individual cookie
     * options such maxAge,http only, and etc.
 */
interface IHuulkSessionManager {

    /**
     * @param options the options to configure the manager with. These  options supply global middle ware config options, such as maximum sessions and cors, and individual cookie
     * options such maxAge,http only, and etc.
     */
    options: HuulkOptions;
    validationChain: HuulkSessionValidatorChain;
    /**
     * setCSRFHeaderOnResponse sets the CSRF header if and only if the manager was configured with the options for csrf enablement set to true/
     * @param res  the response to set the csrf header on
     * @param tokenValue the actual token value generated by the db
     */
    setCSRFHeaderOnResponse(res: NodeResponse, tokenValue: string): void 
    getCSRFHeaderFromRequest(req: NodeRequest<UserObjectSessionDataTypeBase>):string
    canCreateSession(authenticatedPrincipal: string):Promise<boolean>
    getSession(huulkSessionIdCookie: string) : Promise<HuulkSession<UserObjectSessionDataTypeBase> | null>
    /**
     * 
     * @param principalUsername the principal username for which to create the session for
     * @param options the Cookie options which the user configured the middleware with
     * @param objectData the object data which the user wish to save to the session.
     * @returns the newly created HuulkSession or null indicating session creation failed. It's up to the user 
     * how to respond to failure  to create.
     */
    createSession(principalUsername:string, options:CookieOptions, objectData:UserObjectSessionDataTypeBase): Promise<HuulkSession<UserObjectSessionDataTypeBase>>

    /**
     * Updates all sessions belonging to a particular user with sessionData
     * @param principalUser 
     * @param sessionData re
     */
    updateAllSessionsForUser(principalUser: string, sessionData: UserObjectSessionDataTypeBase) : Promise<boolean>;
    /**
     * 
     * @param id the session id to delete from the datastore
     * @returns true if delete operation succeeded. False if delete operation failed. It is up to the user 
     * on how to respond to true or false returns.
     */
    deleteSession(id: string, username: string): Promise<boolean>

    /**
     * 
     * @param session the Huulk session to unpack the userDataObject from.
     * @returns UserObjectSessionDataTypeBase saved to the request. Returning, at minimal {username:"savedUsernameValueExample"} 
     */
    unPackObjectFromSession(session: HuulkSession<UserObjectSessionDataTypeBase>): UserObjectSessionDataTypeBase

    /**
     * 
     * @param req the node request to search for the session id imbued by the Huulk middleware
     * @returns a sessionId string if the session id is discovered and at the very least not falsy. null if no sessionId is found or the supplied sessionId is invalid.
     */
    unPackSessionIdFromRequest(req:NodeRequest<UserObjectSessionDataTypeBase>) : string | null

    /**
     * Returns whether or not a sessionm is active or inactive and whether or not the actual SessionObject is valid, for example
     * that the session object has the correct properties and is not undefined null and etc.
     * 
     * @param session the hulk session to check for expiry
     * @returns true if the session has not expired, or false if the session is expired.
     */
    validateSessionAndCookies(csrfCookieHeader: string | undefined, session: HuulkSession<UserObjectSessionDataTypeBase> | null) : boolean

    /**
     *  This function searches your session store for a session with the given sessionId and if found, imbues the request with the session object and userData.
     * @param req The Node.js request to imbue with the session object belonging to the sessionId
     * @param sessionId The value of the hulksession cookie object to perform store look and request imbue with.
     */
    processSession(req:NodeRequest<UserObjectSessionDataTypeBase>, sessionId: string) : Promise<HuulkSession<UserObjectSessionDataTypeBase> | null>

    /**
     * This function is used inside the login function since we have an incoming request which has not been processed yet, we must 
     * imbue the request with the HuulkSession Object.
     * @param req the node request to serve
     * @param session the huuulksession to imbue the request with
     */
    imbueRequestWithSessionObject(req: NodeRequest<UserObjectSessionDataTypeBase>, session: HuulkSession<UserObjectSessionDataTypeBase>) : void

    /**
     * 
     * @param sessionId the sessionId to perform basic validation checks
     * @returns true if the session Id is at least truthy and false if it is falsy.
     */
    isValidSessionId(sessionId: any) : boolean

    /**
     * deleteAllSessions will completely wipe the session store of any existing sessions. Useful for local testing 
     * Never set on prod. 
     * If this function is invoked in prod profile, it should throw an error since this is likely an accident and bug in moost circumstances.
     */
    deleteAllSessionsLocalTestingOnly() : void

    /**
     * Creates a metadata 
     * @param username the username to getsert for.
     */
    getSertMetadata(username: string)  : Promise<HuulkSessionMetaData | null>;

    /**
     * disconnects the Manager's client from the database.
     */
    disconnect(): Promise<boolean>;

    processRequest(req: NodeRequest<UserObjectSessionDataTypeBase>,res: NodeResponse,next: any):void;

}
//classes and interfaces
export {NodeRequest,NodeResponse,IHuulkSessionManager ,HuulkSession,
        CookieOptions,HuulkOptions,HuulkEnvironment,UserObjectSessionDataTypeBase,
        HuulkSessionMetaData,
        HuulkSessionOptions, HuulkCSRFOptions, HuulkHttpHeaders, HuulkCorsOptions, HuulkThrottleOptons,HuulkCacheOptions,
        HuulkHttpMethods
        }
//enums
export {CacheManagerImplementation}
//consts
export {SESSION_COOKIE_NAME,CSRF_HEADER,UNLIMITED_SESSIONS,NO_CSRF,ONE_DAY_IN_MS}
//type declarations
